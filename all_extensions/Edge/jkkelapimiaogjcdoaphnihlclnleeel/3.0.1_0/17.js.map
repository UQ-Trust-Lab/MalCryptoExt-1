{"version":3,"sources":["webpack:///./src/background/axios/createInstance.js","webpack:///./src/background/axios/isLoadingMiddleware.js","webpack:///./src/background/services/extensionPushLogin.js","webpack:///./src/background/rest/PushLoginRestController.js"],"names":["createInstance","middlewares","instance","axios","create","baseURL","api","isLoadingMiddleware","forEach","middleware","activeRequests","notify","type","includes","publish","requestFulfilled","config","requestRejected","error","Promise","reject","responseFulfilled","response","responseRejected","interceptors","request","use","extensionPushLogin","username","sessionId","initiateSaaspassWebPushLogin","url","params","sessionid","get","data"],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA,MAAMA,cAAc,GAAG,CAAC,GAAGC,WAAJ,KAAoB;AACzC,QAAMC,QAAQ,GAAGC,4CAAK,CAACC,MAAN,CAAa;AAAEC,WAAO,EAAEC,GAAG,CAACD;AAAf,GAAb,CAAjB;AACAE,sEAAmB,CAACL,QAAD,CAAnB;AACAD,aAAW,CAACO,OAAZ,CAAoBC,UAAU,IAAIA,UAAU,CAACP,QAAD,CAA5C;AACA,SAAOA,QAAP;AACD,CALD;;AAOeF,6EAAf,E;;;;;;;;;ACVA;AAAA;AAAA;AAEA,IAAIU,cAAc,GAAG,CAArB;;AAEA,MAAMC,MAAM,GAAGC,IAAI,IAAI;AACrBF,gBAAc,IAAIE,IAAI,KAAK,eAAT,GAA2B,CAA3B,GAA+B,CAAC,CAAlD;;AACA,MAAI,CAAC,CAAD,EAAI,CAAJ,EAAOC,QAAP,CAAgBH,cAAhB,CAAJ,EAAqC;AACnCI,0DAAO,CAAC;AAAEJ;AAAF,KAAD,CAAP;AACD;AACF,CALD;;AAOA,MAAMK,gBAAgB,GAAGC,MAAM,IAAI;AACjCL,QAAM,CAAC,eAAD,EAAkBK,MAAlB,CAAN;AACA,SAAOA,MAAP;AACD,CAHD;;AAKA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC/BP,QAAM,CAAC,eAAD,EAAkBO,KAAlB,CAAN;AACA,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAHD;;AAKA,MAAMG,iBAAiB,GAAGC,QAAQ,IAAI;AACpCX,QAAM,CAAC,kBAAD,EAAqBW,QAArB,CAAN;AACA,SAAOA,QAAP;AACD,CAHD;;AAKA,MAAMC,gBAAgB,GAAGL,KAAK,IAAI;AAChCP,QAAM,CAAC,gBAAD,EAAmBO,KAAnB,CAAN;AACA,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAHD;;AAKA,MAAMX,mBAAmB,GAAGL,QAAQ,IAAI;AACtCA,UAAQ,CAACsB,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAkCX,gBAAlC,EAAoDE,eAApD;AACAf,UAAQ,CAACsB,YAAT,CAAsBF,QAAtB,CAA+BI,GAA/B,CAAmCL,iBAAnC,EAAsDE,gBAAtD;AACD,CAHD;;AAKehB,kFAAf,E;;;;;;;;ACpCA;AAAA;AAAA;;AAEA,MAAMoB,kBAAkB,GAAG,CAACC,QAAD,EAAWC,SAAX,KACzBC,kGAA4B,CAACF,QAAD,EAAWC,SAAX,CAD9B;;AAGeF,iFAAf,E;;;;;;;;ACLA;AAAA;AAAA;AAAA;AAEA,MAAMxB,KAAK,GAAGH,qEAAc,EAA5B;AAEO,MAAM8B,4BAA4B,GAAG,OAAOF,QAAP,EAAiBC,SAAjB,KAA+B;AACzE,QAAME,GAAG,GAAI,6BAAb;AACA,QAAMC,MAAM,GAAG;AAAEJ,YAAF;AAAYK,aAAS,EAAEJ;AAAvB,GAAf;AACA,QAAMP,QAAQ,GAAG,MAAMnB,KAAK,CAAC+B,GAAN,CAAUH,GAAV,EAAe;AAAEC;AAAF,GAAf,CAAvB;AACA,SAAOV,QAAQ,CAACa,IAAhB;AACD,CALM,C","file":"17.js","sourcesContent":["import axios from 'axios';\nimport isLoadingMiddleware from './isLoadingMiddleware';\n\nconst createInstance = (...middlewares) => {\n  const instance = axios.create({ baseURL: api.baseURL });\n  isLoadingMiddleware(instance);\n  middlewares.forEach(middleware => middleware(instance));\n  return instance;\n};\n\nexport default createInstance;\n","import { publish } from '../store';\n\nlet activeRequests = 0;\n\nconst notify = type => {\n  activeRequests += type === 'request-start' ? 1 : -1;\n  if ([0, 1].includes(activeRequests)) {\n    publish({ activeRequests });\n  }\n};\n\nconst requestFulfilled = config => {\n  notify('request-start', config);\n  return config;\n};\n\nconst requestRejected = error => {\n  notify('request-error', error);\n  return Promise.reject(error);\n};\n\nconst responseFulfilled = response => {\n  notify('response-success', response);\n  return response;\n};\n\nconst responseRejected = error => {\n  notify('response-error', error);\n  return Promise.reject(error);\n};\n\nconst isLoadingMiddleware = instance => {\n  instance.interceptors.request.use(requestFulfilled, requestRejected);\n  instance.interceptors.response.use(responseFulfilled, responseRejected);\n};\n\nexport default isLoadingMiddleware;\n","import { initiateSaaspassWebPushLogin } from '../rest/PushLoginRestController';\n\nconst extensionPushLogin = (username, sessionId) =>\n  initiateSaaspassWebPushLogin(username, sessionId);\n\nexport default extensionPushLogin;\n","import createInstance from '../axios/createInstance';\n\nconst axios = createInstance();\n\nexport const initiateSaaspassWebPushLogin = async (username, sessionId) => {\n  const url = `app/rest/pushlogin/saaspass`;\n  const params = { username, sessionid: sessionId };\n  const response = await axios.get(url, { params });\n  return response.data;\n};\n"],"sourceRoot":""}