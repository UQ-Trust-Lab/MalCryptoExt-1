{"version":3,"sources":["webpack:///./src/background/services/extensionLogin.js","webpack:///./src/background/rest/SaaspassUserResource.js"],"names":["extensionLogin","username","password","publicKey","privateKey","generateKey","access_token","refresh_token","server_public_key","getAccessToken","publish","btoa","getServerPublicKey","account","getAccount","isHardTokenUser","roles","includes","saaspassId","login","getUserExtensionData","axios","createInstance","refreshTokenMiddleware","url","headers","Authorization","store","response","get","data"],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,cAAc,GAAG,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACnD,QAAM;AAAEC,aAAF;AAAaC;AAAb,MAA4B,MAAMC,iEAAW,EAAnD;AAEA,QAAM;AACJC,gBADI;AAEJC,iBAFI;AAGJC;AAHI,MAIF,MAAMC,0EAAc,CAACR,QAAD,EAAWC,QAAX,EAAqBC,SAArB,CAJxB;AAMAO,wDAAO,CAAC;AACNJ,gBADM;AAENC,iBAFM;AAGNH,cAAU,EAAEO,IAAI,EAAC,MAAMC,wEAAkB,CAACJ,iBAAD,EAAoBJ,UAApB,CAAzB;AAHV,GAAD,CAAP;AAMA,QAAMS,OAAO,GAAG,MAAMC,6EAAU,EAAhC;AACAJ,wDAAO,CAAC;AACNK,mBAAe,EAAEF,OAAO,CAACG,KAAR,CAAcC,QAAd,CAAuB,sBAAvB,CADX;AAENC,cAAU,EAAEL,OAAO,CAACM;AAFd,GAAD,CAAP;AAKAT,wDAAO,EAAC,MAAMU,4FAAoB,EAA3B,EAAP;AACD,CAtBD;;AAwBepB,6EAAf,E;;;;;;;;AC9BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA,MAAMqB,KAAK,GAAGC,qEAAc,CAACC,qEAAD,CAA5B;AAEO,MAAMT,UAAU,GAAG,YAAY;AACpC,QAAMU,GAAG,GAAI,kBAAb;AACA,QAAMC,OAAO,GAAG;AAAEC,iBAAa,EAAG,UAASC,4CAAK,CAACrB,YAAa;AAA9C,GAAhB;AACA,QAAMsB,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAN,CAAUL,GAAV,EAAe;AAAEC;AAAF,GAAf,CAAvB;AACA,SAAOG,QAAQ,CAACE,IAAhB;AACD,CALM,C","file":"22.js","sourcesContent":["import { generateKey, getServerPublicKey } from '../cryptography';\nimport { getUserExtensionData } from '../rest/SaaspassExtensionResource';\nimport { getAccount } from '../rest/SaaspassUserResource';\nimport { getAccessToken } from '../rest/TokenEndpoint';\nimport { publish } from '../store';\n\nconst extensionLogin = async (username, password) => {\n  const { publicKey, privateKey } = await generateKey();\n\n  const {\n    access_token,\n    refresh_token,\n    server_public_key,\n  } = await getAccessToken(username, password, publicKey);\n\n  publish({\n    access_token,\n    refresh_token,\n    privateKey: btoa(await getServerPublicKey(server_public_key, privateKey)),\n  });\n\n  const account = await getAccount();\n  publish({\n    isHardTokenUser: account.roles.includes('ROLE_HARD_TOKEN_USER'),\n    saaspassId: account.login,\n  });\n\n  publish(await getUserExtensionData());\n};\n\nexport default extensionLogin;\n","import createInstance from '../axios/createInstance';\nimport refreshTokenMiddleware from '../axios/refreshTokenMiddleware';\nimport { store } from '../store';\n\nconst axios = createInstance(refreshTokenMiddleware);\n\nexport const getAccount = async () => {\n  const url = `app/rest/account`;\n  const headers = { Authorization: `Bearer ${store.access_token}` };\n  const response = await axios.get(url, { headers });\n  return response.data;\n};\n"],"sourceRoot":""}